/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accounts/v1/me/": {
    /**
     * Shortcut to `/accounts/v1/{{my customer id}}`.
     *
     * Automatically creates a new customer account if one does not
     * exist for the authenticated user.
     */
    get: operations["accounts_v1_me_retrieve"];
  };
  "/customers/v1/": {
    get: operations["customers_v1_list"];
    post: operations["customers_v1_create"];
  };
  "/customers/v1/{id}/": {
    get: operations["customers_v1_retrieve"];
    put: operations["customers_v1_update"];
    delete: operations["customers_v1_destroy"];
    patch: operations["customers_v1_partial_update"];
  };
  "/customers/v1/oidc-exchange/": {
    post: operations["customers_v1_oidc_exchange_create"];
  };
  "/customers/v1/payment_intent/": {
    post: operations["customers_v1_payment_intent_create"];
  };
  "/customers/v1/renew_token/": {
    post: operations["customers_v1_renew_token_create"];
  };
  "/customers/v1/token/": {
    post: operations["customers_v1_token_create"];
  };
  "/features/v1/": {
    get: operations["features_v1_list"];
    post: operations["features_v1_create"];
  };
  "/features/v1/{id}/": {
    get: operations["features_v1_retrieve"];
    put: operations["features_v1_update"];
    delete: operations["features_v1_destroy"];
    patch: operations["features_v1_partial_update"];
  };
  "/featurespecs/v1/": {
    get: operations["featurespecs_v1_list"];
    post: operations["featurespecs_v1_create"];
  };
  "/featurespecs/v1/{id}/": {
    get: operations["featurespecs_v1_retrieve"];
    put: operations["featurespecs_v1_update"];
    delete: operations["featurespecs_v1_destroy"];
    patch: operations["featurespecs_v1_partial_update"];
  };
  "/invites/v1/": {
    get: operations["invites_v1_list"];
    /** Send an invitation via email. */
    post: operations["invites_v1_create"];
  };
  "/invites/v1/{id}/": {
    get: operations["invites_v1_retrieve"];
    put: operations["invites_v1_update"];
    delete: operations["invites_v1_destroy"];
    patch: operations["invites_v1_partial_update"];
  };
  "/invites/v1/bulk/": {
    /** Send multiple invitations via email. */
    post: operations["invites_v1_bulk_create"];
  };
  "/invites/v1/claim/": {
    /** Claim an invite and be redirected to provider's auth url. */
    get: operations["invites_v1_claim_retrieve"];
  };
  "/openapi.yaml": {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.
     *
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["openapi.yaml_retrieve"];
  };
  "/plans/v1/": {
    get: operations["plans_v1_list"];
    /**
     * Add a feature and optionally specification to a plan by specifying a
     * `feature_id` and `spec_id` in the list of features.
     */
    post: operations["plans_v1_create"];
  };
  "/plans/v1/{id}/": {
    get: operations["plans_v1_retrieve"];
    /**
     * Remove a feature and spec from a plan by specifying `id` and
     * `is_active: false` in the plan feature list in an update operation.  An
     * empty list for PUT or PATCH does nothing.  A PlanFeature cannot change
     * which feature or spec once created. A deactivated PlanFeature can be
     * reactivated by setting `is_active: true`
     */
    put: operations["plans_v1_update"];
    delete: operations["plans_v1_destroy"];
    patch: operations["plans_v1_partial_update"];
  };
  "/providers/v1/": {
    get: operations["providers_v1_list"];
    post: operations["providers_v1_create"];
  };
  "/providers/v1/{id}/": {
    get: operations["providers_v1_retrieve"];
    put: operations["providers_v1_update"];
    delete: operations["providers_v1_destroy"];
    patch: operations["providers_v1_partial_update"];
  };
  "/providers/v1/{id}/stripe/": {
    get: operations["providers_v1_stripe_retrieve"];
    post: operations["providers_v1_stripe_create"];
  };
  "/providers/v1/slug/": {
    get: operations["providers_v1_slug_retrieve"];
  };
  "/subscriptions/v1/": {
    get: operations["subscriptions_v1_list"];
    post: operations["subscriptions_v1_create"];
  };
  "/subscriptions/v1/{id}/": {
    get: operations["subscriptions_v1_retrieve"];
    put: operations["subscriptions_v1_update"];
    delete: operations["subscriptions_v1_destroy"];
    patch: operations["subscriptions_v1_partial_update"];
  };
  "/subscriptions/v1/{id}/report/": {
    get: operations["subscriptions_v1_report_list"];
  };
  "/subscriptions/v1/{id}/switch/": {
    patch: operations["subscriptions_v1_switch_partial_update"];
  };
  "/subscriptions/v1/{id}/usage/": {
    post: operations["subscriptions_v1_usage_create"];
  };
  "/team_memberships/v1/": {
    get: operations["team_memberships_v1_list"];
    post: operations["team_memberships_v1_create"];
  };
  "/team_memberships/v1/{id}/": {
    get: operations["team_memberships_v1_retrieve"];
    put: operations["team_memberships_v1_update"];
    delete: operations["team_memberships_v1_destroy"];
    patch: operations["team_memberships_v1_partial_update"];
  };
  "/teams/v1/": {
    get: operations["teams_v1_list"];
    post: operations["teams_v1_create"];
  };
  "/teams/v1/{id}/": {
    get: operations["teams_v1_retrieve"];
    put: operations["teams_v1_update"];
    delete: operations["teams_v1_destroy"];
    patch: operations["teams_v1_partial_update"];
  };
  "/teams/v1/{id}/invoices/": {
    get: operations["teams_v1_invoices_list"];
  };
  "/tokens/v1/": {
    /** Management of Provider Tokens. */
    get: operations["tokens_v1_list"];
    /** Management of Provider Tokens. */
    post: operations["tokens_v1_create"];
  };
  "/tokens/v1/{id}/": {
    /** Management of Provider Tokens. */
    get: operations["tokens_v1_retrieve"];
    /** Management of Provider Tokens. */
    put: operations["tokens_v1_update"];
    /** Management of Provider Tokens. */
    delete: operations["tokens_v1_destroy"];
    /** Management of Provider Tokens. */
    patch: operations["tokens_v1_partial_update"];
  };
}

export interface components {
  schemas: {
    Account: {
      id: string;
      teams: components["schemas"]["Team"][];
      email: string;
      is_verified: boolean;
    };
    AggregationEnum: "sum" | "last";
    BillingPeriodEnum: "hourly" | "daily" | "weekly" | "monthly" | "annually";
    BulkCreateInviteRequest: {
      sent_to_email?: string;
      is_claimed?: boolean;
      expires_at?: string;
      role?: components["schemas"]["RoleEnum"];
      team_id: string;
      to_emails: string[];
    };
    Customer: {
      id: string;
      email: string;
      source_id: string;
      created_at: string;
      updated_at: string;
    };
    CustomerPaymentIntentRequest: {
      plan_id: string;
      team_id: string;
    };
    CustomerRequest: {
      source_id: string;
    };
    CustomerTokenResponse: {
      token: string;
      is_new: boolean;
    };
    Feature: {
      id: string;
      provider_id?: string;
      slug?: string;
      display?: string | null;
      tooltip?: string | null;
      is_builtin: boolean;
    };
    FeatureRequest: {
      provider_id?: string;
      slug?: string;
      display?: string | null;
      tooltip?: string | null;
    };
    FeatureSpec: {
      id: string;
      name: string;
      record_period?: components["schemas"]["RecordPeriodEnum"];
      aggregation?: components["schemas"]["AggregationEnum"];
      max_limit?: number | null;
      /** Amount in cents */
      unit_price?: number | null;
      provider_id?: string;
    };
    FeatureSpecRequest: {
      name: string;
      record_period?: components["schemas"]["RecordPeriodEnum"];
      aggregation?: components["schemas"]["AggregationEnum"];
      max_limit?: number | null;
      /** Amount in cents */
      unit_price?: number | null;
      provider_id?: string;
    };
    IDTokenExchangeRequest: {
      id_token: string;
    };
    Invite: {
      id: string;
      sent_by: components["schemas"]["PublicProfile"];
      sent_to_email: string;
      is_claimed?: boolean;
      expires_at?: string;
      created_at: string;
      role?: components["schemas"]["RoleEnum"];
      team_id: string;
    };
    InviteRequest: {
      sent_to_email: string;
      is_claimed?: boolean;
      expires_at?: string;
      role?: components["schemas"]["RoleEnum"];
      team_id: string;
    };
    Invoice: {
      id: string;
      billing_period: components["schemas"]["BillingPeriodEnum"];
      created_at: string;
      updated_at: string;
      team_id: string;
      plan_name: string;
      subscription_id: string | null;
      state: components["schemas"]["StateEnum"];
      stripe_payment_id?: string | null;
      total: string;
    };
    IssueCustomerTokenRequest: {
      customer_id?: string;
      customer_email?: string;
      customer_source_id?: string;
    };
    OpEnum: "inc" | "dec" | "set" | "reset";
    PaginatedCustomerList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Customer"][];
    };
    PaginatedFeatureList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Feature"][];
    };
    PaginatedFeatureSpecList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["FeatureSpec"][];
    };
    PaginatedInviteList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Invite"][];
    };
    PaginatedInvoiceList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Invoice"][];
    };
    PaginatedPlanList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Plan"][];
    };
    PaginatedProviderList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Provider"][];
    };
    PaginatedSubscriptionList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Subscription"][];
    };
    PaginatedTeamList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Team"][];
    };
    PaginatedTeammateList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Teammate"][];
    };
    PaginatedTokenList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Token"][];
    };
    PaginatedUsageList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Usage"][];
    };
    PatchedCustomerRequest: {
      source_id?: string;
    };
    PatchedFeatureRequest: {
      provider_id?: string;
      slug?: string;
      display?: string | null;
      tooltip?: string | null;
    };
    PatchedFeatureSpecRequest: {
      name?: string;
      record_period?: components["schemas"]["RecordPeriodEnum"];
      aggregation?: components["schemas"]["AggregationEnum"];
      max_limit?: number | null;
      /** Amount in cents */
      unit_price?: number | null;
      provider_id?: string;
    };
    PatchedInviteRequest: {
      sent_to_email?: string;
      is_claimed?: boolean;
      expires_at?: string;
      role?: components["schemas"]["RoleEnum"];
      team_id?: string;
    };
    PatchedPlanRequest: {
      provider_id?: string;
      name?: string;
      tier?: number;
      is_active?: boolean;
      is_public?: boolean;
      is_trial_allowed?: boolean;
      /** Amount in cents */
      per_year_price_cents?: number | null;
      /** Amount in cents */
      per_month_price_cents?: number | null;
      features?: components["schemas"]["PlanFeatureRequest"][];
      teams_access?: components["schemas"]["TeamAccessRequest"][];
    };
    PatchedPlanSwitchRequest: {
      plan_id?: string;
    };
    PatchedProviderRequest: {
      name?: string;
      slug?: string;
      auth_url?: string | null;
      home_url?: string | null;
      default_plan?: string | null;
      trial_days?: number;
      is_card_required?: boolean;
    };
    PatchedSubscriptionRequest: {
      plan_id?: string;
      team_id?: string;
      is_paused?: boolean;
    };
    PatchedTeamDetailRequest: {
      provider_id?: string;
      name?: string | null;
    };
    PatchedTeammateRequest: {
      role?: components["schemas"]["RoleEnum"];
    };
    PatchedTokenRequest: {
      provider_id?: string;
      is_active?: boolean;
      is_public?: boolean;
    };
    PaymentIntentResponse: {
      client_secret: string;
    };
    Plan: {
      id: string;
      provider_id?: string;
      name: string;
      tier?: number;
      is_active: boolean;
      is_public: boolean;
      is_trial_allowed: boolean;
      /** Amount in cents */
      per_year_price_cents?: number | null;
      /** Amount in cents */
      per_month_price_cents?: number | null;
      features: components["schemas"]["PlanFeature"][];
      teams_access: components["schemas"]["TeamAccess"][];
    };
    PlanFeature: {
      id?: string;
      is_active?: boolean;
      feature: components["schemas"]["Feature"];
      spec: components["schemas"]["FeatureSpec"];
      display: string;
      slug: string;
      max_limit: number;
    };
    PlanFeatureRequest: {
      id?: string;
      feature_id?: string;
      spec_id?: string;
      is_active?: boolean;
    };
    PlanRequest: {
      provider_id?: string;
      name: string;
      tier?: number;
      is_active: boolean;
      is_public: boolean;
      is_trial_allowed: boolean;
      /** Amount in cents */
      per_year_price_cents?: number | null;
      /** Amount in cents */
      per_month_price_cents?: number | null;
      features: components["schemas"]["PlanFeatureRequest"][];
      teams_access: components["schemas"]["TeamAccessRequest"][];
    };
    Provider: {
      id: string;
      name: string;
      slug: string;
      auth_url?: string | null;
      home_url?: string | null;
      default_plan?: string | null;
      trial_days?: number;
      is_card_required?: boolean;
      owner_id: string;
      stripe_account_id: string;
    };
    ProviderRequest: {
      name: string;
      slug: string;
      auth_url?: string | null;
      home_url?: string | null;
      default_plan?: string | null;
      trial_days?: number;
      is_card_required?: boolean;
    };
    PublicProfile: {
      id: string;
      email: string;
    };
    RecordPeriodEnum: "hourly" | "daily" | "weekly" | "monthly" | "annually";
    ReportUsageRequest: {
      slug: string;
      op: components["schemas"]["OpEnum"];
      value?: number;
    };
    RoleEnum: "owner" | "member";
    Slug: {
      slug: string;
    };
    StateEnum: "draft" | "open" | "paid" | "canceled" | "void";
    Subscription: {
      id: string;
      plan_id: string;
      team_id: string;
      start_at: string;
      end_at: string;
      is_paused?: boolean;
      is_active: string;
    };
    SubscriptionDetail: {
      id: string;
      plan: components["schemas"]["Plan"];
      plan_id: string;
      start_at: string;
      end_at: string | null;
      is_paused: boolean;
      is_active: boolean;
      days_used: number;
      days_left: number;
      billing_period: string;
      usages: components["schemas"]["Usage"][];
    };
    SubscriptionRequest: {
      plan_id: string;
      team_id: string;
      is_paused?: boolean;
    };
    Team: {
      id: string;
      name?: string | null;
      created_at: string;
      updated_at: string;
    };
    TeamAccess: {
      id?: string;
      team_id: string;
      name?: string;
    };
    TeamAccessRequest: {
      id?: string;
      team_id: string;
      name?: string;
      revoke?: boolean;
    };
    TeamDetail: {
      id: string;
      provider_id?: string;
      name: string | null;
      members: components["schemas"]["Teammate"][];
      invites: components["schemas"]["Invite"][];
      subscription: components["schemas"]["SubscriptionDetail"];
      available_plans: components["schemas"]["Plan"][];
      created_at: string;
      updated_at: string;
    };
    TeamDetailRequest: {
      provider_id?: string;
      name: string | null;
    };
    Teammate: {
      id: string;
      customer_id: string;
      role: components["schemas"]["RoleEnum"];
      email: string;
    };
    TeammateRequest: {
      role: components["schemas"]["RoleEnum"];
    };
    Token: {
      id: string;
      provider_id?: string;
      token: string;
      is_active?: boolean;
      is_public?: boolean;
      last_used_at: string;
      created_at: string;
    };
    TokenRequest: {
      provider_id?: string;
      is_active?: boolean;
      is_public?: boolean;
    };
    Usage: {
      slug: string;
      value: number;
      limit: number;
    };
  };
}

export interface operations {
  /**
   * Shortcut to `/accounts/v1/{{my customer id}}`.
   *
   * Automatically creates a new customer account if one does not
   * exist for the authenticated user.
   */
  accounts_v1_me_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
    };
  };
  customers_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedCustomerList"];
        };
      };
    };
  };
  customers_v1_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CustomerRequest"];
        "multipart/form-data": components["schemas"]["CustomerRequest"];
      };
    };
  };
  customers_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this customer. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
    };
  };
  customers_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this customer. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CustomerRequest"];
        "multipart/form-data": components["schemas"]["CustomerRequest"];
      };
    };
  };
  customers_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this customer. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  customers_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this customer. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedCustomerRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedCustomerRequest"];
        "multipart/form-data": components["schemas"]["PatchedCustomerRequest"];
      };
    };
  };
  customers_v1_oidc_exchange_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IDTokenExchangeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["IDTokenExchangeRequest"];
        "multipart/form-data": components["schemas"]["IDTokenExchangeRequest"];
      };
    };
  };
  customers_v1_payment_intent_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaymentIntentResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerPaymentIntentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CustomerPaymentIntentRequest"];
        "multipart/form-data": components["schemas"]["CustomerPaymentIntentRequest"];
      };
    };
  };
  customers_v1_renew_token_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerTokenResponse"];
        };
      };
    };
  };
  customers_v1_token_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IssueCustomerTokenRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["IssueCustomerTokenRequest"];
        "multipart/form-data": components["schemas"]["IssueCustomerTokenRequest"];
      };
    };
  };
  features_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
        slug?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedFeatureList"];
        };
      };
    };
  };
  features_v1_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Feature"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureRequest"];
        "multipart/form-data": components["schemas"]["FeatureRequest"];
      };
    };
  };
  features_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this feature. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Feature"];
        };
      };
    };
  };
  features_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this feature. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Feature"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureRequest"];
        "multipart/form-data": components["schemas"]["FeatureRequest"];
      };
    };
  };
  features_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this feature. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  features_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this feature. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Feature"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedFeatureRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedFeatureRequest"];
        "multipart/form-data": components["schemas"]["PatchedFeatureRequest"];
      };
    };
  };
  featurespecs_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedFeatureSpecList"];
        };
      };
    };
  };
  featurespecs_v1_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FeatureSpec"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureSpecRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureSpecRequest"];
        "multipart/form-data": components["schemas"]["FeatureSpecRequest"];
      };
    };
  };
  featurespecs_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this feature spec. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureSpec"];
        };
      };
    };
  };
  featurespecs_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this feature spec. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureSpec"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureSpecRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureSpecRequest"];
        "multipart/form-data": components["schemas"]["FeatureSpecRequest"];
      };
    };
  };
  featurespecs_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this feature spec. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  featurespecs_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this feature spec. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureSpec"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedFeatureSpecRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedFeatureSpecRequest"];
        "multipart/form-data": components["schemas"]["PatchedFeatureSpecRequest"];
      };
    };
  };
  invites_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedInviteList"];
        };
      };
    };
  };
  /** Send an invitation via email. */
  invites_v1_create: {
    responses: {
      /** No response body */
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InviteRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["InviteRequest"];
        "multipart/form-data": components["schemas"]["InviteRequest"];
      };
    };
  };
  invites_v1_retrieve: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invite"];
        };
      };
    };
  };
  invites_v1_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invite"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InviteRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["InviteRequest"];
        "multipart/form-data": components["schemas"]["InviteRequest"];
      };
    };
  };
  invites_v1_destroy: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  invites_v1_partial_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invite"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedInviteRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedInviteRequest"];
        "multipart/form-data": components["schemas"]["PatchedInviteRequest"];
      };
    };
  };
  /** Send multiple invitations via email. */
  invites_v1_bulk_create: {
    responses: {
      /** No response body */
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkCreateInviteRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["BulkCreateInviteRequest"];
        "multipart/form-data": components["schemas"]["BulkCreateInviteRequest"];
      };
    };
  };
  /** Claim an invite and be redirected to provider's auth url. */
  invites_v1_claim_retrieve: {
    parameters: {
      query: {
        token: string;
      };
    };
    responses: {
      /** No response body */
      302: never;
    };
  };
  /**
   * OpenApi3 schema for this API. Format can be selected via content negotiation.
   *
   * - YAML: application/vnd.oai.openapi
   * - JSON: application/vnd.oai.openapi+json
   */
  "openapi.yaml_retrieve": {
    parameters: {
      query: {
        format?: "json" | "yaml";
        lang?:
          | "af"
          | "ar"
          | "ar-dz"
          | "ast"
          | "az"
          | "be"
          | "bg"
          | "bn"
          | "br"
          | "bs"
          | "ca"
          | "cs"
          | "cy"
          | "da"
          | "de"
          | "dsb"
          | "el"
          | "en"
          | "en-au"
          | "en-gb"
          | "eo"
          | "es"
          | "es-ar"
          | "es-co"
          | "es-mx"
          | "es-ni"
          | "es-ve"
          | "et"
          | "eu"
          | "fa"
          | "fi"
          | "fr"
          | "fy"
          | "ga"
          | "gd"
          | "gl"
          | "he"
          | "hi"
          | "hr"
          | "hsb"
          | "hu"
          | "hy"
          | "ia"
          | "id"
          | "ig"
          | "io"
          | "is"
          | "it"
          | "ja"
          | "ka"
          | "kab"
          | "kk"
          | "km"
          | "kn"
          | "ko"
          | "ky"
          | "lb"
          | "lt"
          | "lv"
          | "mk"
          | "ml"
          | "mn"
          | "mr"
          | "my"
          | "nb"
          | "ne"
          | "nl"
          | "nn"
          | "os"
          | "pa"
          | "pl"
          | "pt"
          | "pt-br"
          | "ro"
          | "ru"
          | "sk"
          | "sl"
          | "sq"
          | "sr"
          | "sr-latn"
          | "sv"
          | "sw"
          | "ta"
          | "te"
          | "tg"
          | "th"
          | "tk"
          | "tr"
          | "tt"
          | "udm"
          | "uk"
          | "ur"
          | "uz"
          | "vi"
          | "zh-hans"
          | "zh-hant";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi": { [key: string]: any };
          "application/yaml": { [key: string]: any };
          "application/vnd.oai.openapi+json": { [key: string]: any };
          "application/json": { [key: string]: any };
        };
      };
    };
  };
  plans_v1_list: {
    parameters: {
      query: {
        is_active?: boolean;
        is_public?: boolean;
        is_trial_allowed?: boolean;
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPlanList"];
        };
      };
    };
  };
  /**
   * Add a feature and optionally specification to a plan by specifying a
   * `feature_id` and `spec_id` in the list of features.
   */
  plans_v1_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PlanRequest"];
        "multipart/form-data": components["schemas"]["PlanRequest"];
      };
    };
  };
  plans_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this plan. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
    };
  };
  /**
   * Remove a feature and spec from a plan by specifying `id` and
   * `is_active: false` in the plan feature list in an update operation.  An
   * empty list for PUT or PATCH does nothing.  A PlanFeature cannot change
   * which feature or spec once created. A deactivated PlanFeature can be
   * reactivated by setting `is_active: true`
   */
  plans_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this plan. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PlanRequest"];
        "multipart/form-data": components["schemas"]["PlanRequest"];
      };
    };
  };
  plans_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this plan. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  plans_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this plan. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPlanRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlanRequest"];
        "multipart/form-data": components["schemas"]["PatchedPlanRequest"];
      };
    };
  };
  providers_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedProviderList"];
        };
      };
    };
  };
  providers_v1_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Provider"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProviderRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProviderRequest"];
        "multipart/form-data": components["schemas"]["ProviderRequest"];
      };
    };
  };
  providers_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Provider"];
        };
      };
    };
  };
  providers_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Provider"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProviderRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProviderRequest"];
        "multipart/form-data": components["schemas"]["ProviderRequest"];
      };
    };
  };
  providers_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  providers_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Provider"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedProviderRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedProviderRequest"];
        "multipart/form-data": components["schemas"]["PatchedProviderRequest"];
      };
    };
  };
  providers_v1_stripe_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Provider"];
        };
      };
    };
  };
  providers_v1_stripe_create: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Provider"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProviderRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProviderRequest"];
        "multipart/form-data": components["schemas"]["ProviderRequest"];
      };
    };
  };
  providers_v1_slug_retrieve: {
    parameters: {
      query: {
        slug?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Slug"];
        };
      };
    };
  };
  subscriptions_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSubscriptionList"];
        };
      };
    };
  };
  subscriptions_v1_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscriptionRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRequest"];
        "multipart/form-data": components["schemas"]["SubscriptionRequest"];
      };
    };
  };
  subscriptions_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
  subscriptions_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscriptionRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRequest"];
        "multipart/form-data": components["schemas"]["SubscriptionRequest"];
      };
    };
  };
  subscriptions_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  subscriptions_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedSubscriptionRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSubscriptionRequest"];
        "multipart/form-data": components["schemas"]["PatchedSubscriptionRequest"];
      };
    };
  };
  subscriptions_v1_report_list: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string;
      };
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedUsageList"];
        };
      };
    };
  };
  subscriptions_v1_switch_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPlanSwitchRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlanSwitchRequest"];
        "multipart/form-data": components["schemas"]["PatchedPlanSwitchRequest"];
      };
    };
  };
  subscriptions_v1_usage_create: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Usage"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportUsageRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ReportUsageRequest"];
        "multipart/form-data": components["schemas"]["ReportUsageRequest"];
      };
    };
  };
  team_memberships_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTeammateList"];
        };
      };
    };
  };
  team_memberships_v1_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Teammate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeammateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TeammateRequest"];
        "multipart/form-data": components["schemas"]["TeammateRequest"];
      };
    };
  };
  team_memberships_v1_retrieve: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Teammate"];
        };
      };
    };
  };
  team_memberships_v1_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Teammate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeammateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TeammateRequest"];
        "multipart/form-data": components["schemas"]["TeammateRequest"];
      };
    };
  };
  team_memberships_v1_destroy: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  team_memberships_v1_partial_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Teammate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedTeammateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeammateRequest"];
        "multipart/form-data": components["schemas"]["PatchedTeammateRequest"];
      };
    };
  };
  teams_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTeamList"];
        };
      };
    };
  };
  teams_v1_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TeamDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamDetailRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamDetailRequest"];
        "multipart/form-data": components["schemas"]["TeamDetailRequest"];
      };
    };
  };
  teams_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamDetail"];
        };
      };
    };
  };
  teams_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamDetailRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamDetailRequest"];
        "multipart/form-data": components["schemas"]["TeamDetailRequest"];
      };
    };
  };
  teams_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  teams_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedTeamDetailRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeamDetailRequest"];
        "multipart/form-data": components["schemas"]["PatchedTeamDetailRequest"];
      };
    };
  };
  teams_v1_invoices_list: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string;
      };
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedInvoiceList"];
        };
      };
    };
  };
  /** Management of Provider Tokens. */
  tokens_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTokenList"];
        };
      };
    };
  };
  /** Management of Provider Tokens. */
  tokens_v1_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenRequest"];
        "multipart/form-data": components["schemas"]["TokenRequest"];
      };
    };
  };
  /** Management of Provider Tokens. */
  tokens_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this provider token. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
  };
  /** Management of Provider Tokens. */
  tokens_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this provider token. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenRequest"];
        "multipart/form-data": components["schemas"]["TokenRequest"];
      };
    };
  };
  /** Management of Provider Tokens. */
  tokens_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this provider token. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  /** Management of Provider Tokens. */
  tokens_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this provider token. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedTokenRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTokenRequest"];
        "multipart/form-data": components["schemas"]["PatchedTokenRequest"];
      };
    };
  };
}

export interface external {}
