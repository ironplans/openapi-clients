/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedSubscriptionList,
    PaginatedSubscriptionListFromJSON,
    PaginatedSubscriptionListToJSON,
    PaginatedUsageList,
    PaginatedUsageListFromJSON,
    PaginatedUsageListToJSON,
    PatchedPlanSwitchRequest,
    PatchedPlanSwitchRequestFromJSON,
    PatchedPlanSwitchRequestToJSON,
    PatchedSubscriptionRequest,
    PatchedSubscriptionRequestFromJSON,
    PatchedSubscriptionRequestToJSON,
    ReportUsageRequest,
    ReportUsageRequestFromJSON,
    ReportUsageRequestToJSON,
    Subscription,
    SubscriptionFromJSON,
    SubscriptionToJSON,
    SubscriptionRequest,
    SubscriptionRequestFromJSON,
    SubscriptionRequestToJSON,
    Usage,
    UsageFromJSON,
    UsageToJSON,
} from '../models';

export interface SubscriptionsV1CreateRequest {
    subscriptionRequest: SubscriptionRequest;
}

export interface SubscriptionsV1DestroyRequest {
    id: string;
}

export interface SubscriptionsV1ListRequest {
    limit?: number;
    offset?: number;
}

export interface SubscriptionsV1PartialUpdateRequest {
    id: string;
    patchedSubscriptionRequest?: PatchedSubscriptionRequest;
}

export interface SubscriptionsV1ReportListRequest {
    id: string;
    limit?: number;
    offset?: number;
}

export interface SubscriptionsV1RetrieveRequest {
    id: string;
}

export interface SubscriptionsV1SwitchPartialUpdateRequest {
    id: string;
    patchedPlanSwitchRequest?: PatchedPlanSwitchRequest;
}

export interface SubscriptionsV1UpdateRequest {
    id: string;
    subscriptionRequest: SubscriptionRequest;
}

export interface SubscriptionsV1UsageCreateRequest {
    id: string;
    reportUsageRequest: ReportUsageRequest;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionsV1CreateRaw(requestParameters: SubscriptionsV1CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionRequest === null || requestParameters.subscriptionRequest === undefined) {
            throw new runtime.RequiredError('subscriptionRequest','Required parameter requestParameters.subscriptionRequest was null or undefined when calling subscriptionsV1Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/subscriptions/v1/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionRequestToJSON(requestParameters.subscriptionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsV1Create(requestParameters: SubscriptionsV1CreateRequest, initOverrides?: RequestInit): Promise<Subscription> {
        const response = await this.subscriptionsV1CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsV1DestroyRaw(requestParameters: SubscriptionsV1DestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsV1Destroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/subscriptions/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async subscriptionsV1Destroy(requestParameters: SubscriptionsV1DestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.subscriptionsV1DestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async subscriptionsV1ListRaw(requestParameters: SubscriptionsV1ListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedSubscriptionList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/subscriptions/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSubscriptionListFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsV1List(requestParameters: SubscriptionsV1ListRequest, initOverrides?: RequestInit): Promise<PaginatedSubscriptionList> {
        const response = await this.subscriptionsV1ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsV1PartialUpdateRaw(requestParameters: SubscriptionsV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsV1PartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/subscriptions/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSubscriptionRequestToJSON(requestParameters.patchedSubscriptionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsV1PartialUpdate(requestParameters: SubscriptionsV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<Subscription> {
        const response = await this.subscriptionsV1PartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsV1ReportListRaw(requestParameters: SubscriptionsV1ReportListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedUsageList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsV1ReportList.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/subscriptions/v1/{id}/report/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUsageListFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsV1ReportList(requestParameters: SubscriptionsV1ReportListRequest, initOverrides?: RequestInit): Promise<PaginatedUsageList> {
        const response = await this.subscriptionsV1ReportListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsV1RetrieveRaw(requestParameters: SubscriptionsV1RetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsV1Retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/subscriptions/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsV1Retrieve(requestParameters: SubscriptionsV1RetrieveRequest, initOverrides?: RequestInit): Promise<Subscription> {
        const response = await this.subscriptionsV1RetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsV1SwitchPartialUpdateRaw(requestParameters: SubscriptionsV1SwitchPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsV1SwitchPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/subscriptions/v1/{id}/switch/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPlanSwitchRequestToJSON(requestParameters.patchedPlanSwitchRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsV1SwitchPartialUpdate(requestParameters: SubscriptionsV1SwitchPartialUpdateRequest, initOverrides?: RequestInit): Promise<Subscription> {
        const response = await this.subscriptionsV1SwitchPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsV1UpdateRaw(requestParameters: SubscriptionsV1UpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsV1Update.');
        }

        if (requestParameters.subscriptionRequest === null || requestParameters.subscriptionRequest === undefined) {
            throw new runtime.RequiredError('subscriptionRequest','Required parameter requestParameters.subscriptionRequest was null or undefined when calling subscriptionsV1Update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/subscriptions/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionRequestToJSON(requestParameters.subscriptionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsV1Update(requestParameters: SubscriptionsV1UpdateRequest, initOverrides?: RequestInit): Promise<Subscription> {
        const response = await this.subscriptionsV1UpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsV1UsageCreateRaw(requestParameters: SubscriptionsV1UsageCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Usage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsV1UsageCreate.');
        }

        if (requestParameters.reportUsageRequest === null || requestParameters.reportUsageRequest === undefined) {
            throw new runtime.RequiredError('reportUsageRequest','Required parameter requestParameters.reportUsageRequest was null or undefined when calling subscriptionsV1UsageCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/subscriptions/v1/{id}/usage/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportUsageRequestToJSON(requestParameters.reportUsageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsageFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsV1UsageCreate(requestParameters: SubscriptionsV1UsageCreateRequest, initOverrides?: RequestInit): Promise<Usage> {
        const response = await this.subscriptionsV1UsageCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
