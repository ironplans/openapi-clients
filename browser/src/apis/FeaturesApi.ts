/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Feature,
    FeatureFromJSON,
    FeatureToJSON,
    FeatureRequest,
    FeatureRequestFromJSON,
    FeatureRequestToJSON,
    PaginatedFeatureList,
    PaginatedFeatureListFromJSON,
    PaginatedFeatureListToJSON,
    PatchedFeatureRequest,
    PatchedFeatureRequestFromJSON,
    PatchedFeatureRequestToJSON,
} from '../models';

export interface FeaturesV1CreateRequest {
    featureRequest?: FeatureRequest;
}

export interface FeaturesV1DestroyRequest {
    id: string;
}

export interface FeaturesV1ListRequest {
    limit?: number;
    offset?: number;
    slug?: string;
}

export interface FeaturesV1PartialUpdateRequest {
    id: string;
    patchedFeatureRequest?: PatchedFeatureRequest;
}

export interface FeaturesV1RetrieveRequest {
    id: string;
}

export interface FeaturesV1UpdateRequest {
    id: string;
    featureRequest?: FeatureRequest;
}

/**
 * 
 */
export class FeaturesApi extends runtime.BaseAPI {

    /**
     */
    async featuresV1CreateRaw(requestParameters: FeaturesV1CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Feature>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/features/v1/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeatureRequestToJSON(requestParameters.featureRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureFromJSON(jsonValue));
    }

    /**
     */
    async featuresV1Create(requestParameters: FeaturesV1CreateRequest, initOverrides?: RequestInit): Promise<Feature> {
        const response = await this.featuresV1CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async featuresV1DestroyRaw(requestParameters: FeaturesV1DestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling featuresV1Destroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/features/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async featuresV1Destroy(requestParameters: FeaturesV1DestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.featuresV1DestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async featuresV1ListRaw(requestParameters: FeaturesV1ListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedFeatureList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['slug'] = requestParameters.slug;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/features/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFeatureListFromJSON(jsonValue));
    }

    /**
     */
    async featuresV1List(requestParameters: FeaturesV1ListRequest, initOverrides?: RequestInit): Promise<PaginatedFeatureList> {
        const response = await this.featuresV1ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async featuresV1PartialUpdateRaw(requestParameters: FeaturesV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Feature>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling featuresV1PartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/features/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFeatureRequestToJSON(requestParameters.patchedFeatureRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureFromJSON(jsonValue));
    }

    /**
     */
    async featuresV1PartialUpdate(requestParameters: FeaturesV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<Feature> {
        const response = await this.featuresV1PartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async featuresV1RetrieveRaw(requestParameters: FeaturesV1RetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Feature>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling featuresV1Retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/features/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureFromJSON(jsonValue));
    }

    /**
     */
    async featuresV1Retrieve(requestParameters: FeaturesV1RetrieveRequest, initOverrides?: RequestInit): Promise<Feature> {
        const response = await this.featuresV1RetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async featuresV1UpdateRaw(requestParameters: FeaturesV1UpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Feature>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling featuresV1Update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/features/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FeatureRequestToJSON(requestParameters.featureRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureFromJSON(jsonValue));
    }

    /**
     */
    async featuresV1Update(requestParameters: FeaturesV1UpdateRequest, initOverrides?: RequestInit): Promise<Feature> {
        const response = await this.featuresV1UpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
