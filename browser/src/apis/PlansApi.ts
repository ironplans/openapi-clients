/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedPlanList,
    PaginatedPlanListFromJSON,
    PaginatedPlanListToJSON,
    PatchedPlanRequest,
    PatchedPlanRequestFromJSON,
    PatchedPlanRequestToJSON,
    Plan,
    PlanFromJSON,
    PlanToJSON,
    PlanRequest,
    PlanRequestFromJSON,
    PlanRequestToJSON,
} from '../models';

export interface PlansV1CreateRequest {
    planRequest: PlanRequest;
}

export interface PlansV1DestroyRequest {
    id: string;
}

export interface PlansV1ListRequest {
    limit?: number;
    offset?: number;
}

export interface PlansV1PartialUpdateRequest {
    id: string;
    patchedPlanRequest?: PatchedPlanRequest;
}

export interface PlansV1RetrieveRequest {
    id: string;
}

export interface PlansV1UpdateRequest {
    id: string;
    planRequest: PlanRequest;
}

/**
 * 
 */
export class PlansApi extends runtime.BaseAPI {

    /**
     */
    async plansV1CreateRaw(requestParameters: PlansV1CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Plan>> {
        if (requestParameters.planRequest === null || requestParameters.planRequest === undefined) {
            throw new runtime.RequiredError('planRequest','Required parameter requestParameters.planRequest was null or undefined when calling plansV1Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/plans/v1/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlanRequestToJSON(requestParameters.planRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanFromJSON(jsonValue));
    }

    /**
     */
    async plansV1Create(requestParameters: PlansV1CreateRequest, initOverrides?: RequestInit): Promise<Plan> {
        const response = await this.plansV1CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async plansV1DestroyRaw(requestParameters: PlansV1DestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling plansV1Destroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/plans/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async plansV1Destroy(requestParameters: PlansV1DestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.plansV1DestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async plansV1ListRaw(requestParameters: PlansV1ListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedPlanList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/plans/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPlanListFromJSON(jsonValue));
    }

    /**
     */
    async plansV1List(requestParameters: PlansV1ListRequest, initOverrides?: RequestInit): Promise<PaginatedPlanList> {
        const response = await this.plansV1ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async plansV1PartialUpdateRaw(requestParameters: PlansV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Plan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling plansV1PartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/plans/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPlanRequestToJSON(requestParameters.patchedPlanRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanFromJSON(jsonValue));
    }

    /**
     */
    async plansV1PartialUpdate(requestParameters: PlansV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<Plan> {
        const response = await this.plansV1PartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async plansV1RetrieveRaw(requestParameters: PlansV1RetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Plan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling plansV1Retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/plans/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanFromJSON(jsonValue));
    }

    /**
     */
    async plansV1Retrieve(requestParameters: PlansV1RetrieveRequest, initOverrides?: RequestInit): Promise<Plan> {
        const response = await this.plansV1RetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async plansV1UpdateRaw(requestParameters: PlansV1UpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Plan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling plansV1Update.');
        }

        if (requestParameters.planRequest === null || requestParameters.planRequest === undefined) {
            throw new runtime.RequiredError('planRequest','Required parameter requestParameters.planRequest was null or undefined when calling plansV1Update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/plans/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlanRequestToJSON(requestParameters.planRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanFromJSON(jsonValue));
    }

    /**
     */
    async plansV1Update(requestParameters: PlansV1UpdateRequest, initOverrides?: RequestInit): Promise<Plan> {
        const response = await this.plansV1UpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
