/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FeatureSpec,
    FeatureSpecFromJSON,
    FeatureSpecToJSON,
    FeatureSpecRequest,
    FeatureSpecRequestFromJSON,
    FeatureSpecRequestToJSON,
    PaginatedFeatureSpecList,
    PaginatedFeatureSpecListFromJSON,
    PaginatedFeatureSpecListToJSON,
    PatchedFeatureSpecRequest,
    PatchedFeatureSpecRequestFromJSON,
    PatchedFeatureSpecRequestToJSON,
} from '../models';

export interface FeaturespecsV1CreateRequest {
    featureSpecRequest: FeatureSpecRequest;
}

export interface FeaturespecsV1DestroyRequest {
    id: string;
}

export interface FeaturespecsV1ListRequest {
    limit?: number;
    offset?: number;
}

export interface FeaturespecsV1PartialUpdateRequest {
    id: string;
    patchedFeatureSpecRequest?: PatchedFeatureSpecRequest;
}

export interface FeaturespecsV1RetrieveRequest {
    id: string;
}

export interface FeaturespecsV1UpdateRequest {
    id: string;
    featureSpecRequest: FeatureSpecRequest;
}

/**
 * 
 */
export class FeaturespecsApi extends runtime.BaseAPI {

    /**
     */
    async featurespecsV1CreateRaw(requestParameters: FeaturespecsV1CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FeatureSpec>> {
        if (requestParameters.featureSpecRequest === null || requestParameters.featureSpecRequest === undefined) {
            throw new runtime.RequiredError('featureSpecRequest','Required parameter requestParameters.featureSpecRequest was null or undefined when calling featurespecsV1Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/featurespecs/v1/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeatureSpecRequestToJSON(requestParameters.featureSpecRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSpecFromJSON(jsonValue));
    }

    /**
     */
    async featurespecsV1Create(requestParameters: FeaturespecsV1CreateRequest, initOverrides?: RequestInit): Promise<FeatureSpec> {
        const response = await this.featurespecsV1CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async featurespecsV1DestroyRaw(requestParameters: FeaturespecsV1DestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling featurespecsV1Destroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/featurespecs/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async featurespecsV1Destroy(requestParameters: FeaturespecsV1DestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.featurespecsV1DestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async featurespecsV1ListRaw(requestParameters: FeaturespecsV1ListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedFeatureSpecList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/featurespecs/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFeatureSpecListFromJSON(jsonValue));
    }

    /**
     */
    async featurespecsV1List(requestParameters: FeaturespecsV1ListRequest, initOverrides?: RequestInit): Promise<PaginatedFeatureSpecList> {
        const response = await this.featurespecsV1ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async featurespecsV1PartialUpdateRaw(requestParameters: FeaturespecsV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FeatureSpec>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling featurespecsV1PartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/featurespecs/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFeatureSpecRequestToJSON(requestParameters.patchedFeatureSpecRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSpecFromJSON(jsonValue));
    }

    /**
     */
    async featurespecsV1PartialUpdate(requestParameters: FeaturespecsV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<FeatureSpec> {
        const response = await this.featurespecsV1PartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async featurespecsV1RetrieveRaw(requestParameters: FeaturespecsV1RetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FeatureSpec>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling featurespecsV1Retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/featurespecs/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSpecFromJSON(jsonValue));
    }

    /**
     */
    async featurespecsV1Retrieve(requestParameters: FeaturespecsV1RetrieveRequest, initOverrides?: RequestInit): Promise<FeatureSpec> {
        const response = await this.featurespecsV1RetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async featurespecsV1UpdateRaw(requestParameters: FeaturespecsV1UpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FeatureSpec>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling featurespecsV1Update.');
        }

        if (requestParameters.featureSpecRequest === null || requestParameters.featureSpecRequest === undefined) {
            throw new runtime.RequiredError('featureSpecRequest','Required parameter requestParameters.featureSpecRequest was null or undefined when calling featurespecsV1Update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/featurespecs/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FeatureSpecRequestToJSON(requestParameters.featureSpecRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSpecFromJSON(jsonValue));
    }

    /**
     */
    async featurespecsV1Update(requestParameters: FeaturespecsV1UpdateRequest, initOverrides?: RequestInit): Promise<FeatureSpec> {
        const response = await this.featurespecsV1UpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
