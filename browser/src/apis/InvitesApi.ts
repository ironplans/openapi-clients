/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BulkCreateInviteRequest,
    BulkCreateInviteRequestFromJSON,
    BulkCreateInviteRequestToJSON,
    Invite,
    InviteFromJSON,
    InviteToJSON,
    InviteRequest,
    InviteRequestFromJSON,
    InviteRequestToJSON,
    PaginatedInviteList,
    PaginatedInviteListFromJSON,
    PaginatedInviteListToJSON,
    PatchedInviteRequest,
    PatchedInviteRequestFromJSON,
    PatchedInviteRequestToJSON,
} from '../models';

export interface InvitesV1BulkCreateRequest {
    bulkCreateInviteRequest: BulkCreateInviteRequest;
}

export interface InvitesV1ClaimRetrieveRequest {
    token: string;
}

export interface InvitesV1CreateRequest {
    inviteRequest: InviteRequest;
}

export interface InvitesV1DestroyRequest {
    id: string;
}

export interface InvitesV1ListRequest {
    limit?: number;
    offset?: number;
}

export interface InvitesV1PartialUpdateRequest {
    id: string;
    patchedInviteRequest?: PatchedInviteRequest;
}

export interface InvitesV1RetrieveRequest {
    id: string;
}

export interface InvitesV1UpdateRequest {
    id: string;
    inviteRequest: InviteRequest;
}

/**
 * 
 */
export class InvitesApi extends runtime.BaseAPI {

    /**
     * Send multiple invitations via email.
     */
    async invitesV1BulkCreateRaw(requestParameters: InvitesV1BulkCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.bulkCreateInviteRequest === null || requestParameters.bulkCreateInviteRequest === undefined) {
            throw new runtime.RequiredError('bulkCreateInviteRequest','Required parameter requestParameters.bulkCreateInviteRequest was null or undefined when calling invitesV1BulkCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/invites/v1/bulk/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkCreateInviteRequestToJSON(requestParameters.bulkCreateInviteRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send multiple invitations via email.
     */
    async invitesV1BulkCreate(requestParameters: InvitesV1BulkCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.invitesV1BulkCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Claim an invite and be redirected to provider\'s auth url.
     */
    async invitesV1ClaimRetrieveRaw(requestParameters: InvitesV1ClaimRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling invitesV1ClaimRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/invites/v1/claim/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Claim an invite and be redirected to provider\'s auth url.
     */
    async invitesV1ClaimRetrieve(requestParameters: InvitesV1ClaimRetrieveRequest, initOverrides?: RequestInit): Promise<void> {
        await this.invitesV1ClaimRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     * Send an invitation via email.
     */
    async invitesV1CreateRaw(requestParameters: InvitesV1CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inviteRequest === null || requestParameters.inviteRequest === undefined) {
            throw new runtime.RequiredError('inviteRequest','Required parameter requestParameters.inviteRequest was null or undefined when calling invitesV1Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/invites/v1/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InviteRequestToJSON(requestParameters.inviteRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send an invitation via email.
     */
    async invitesV1Create(requestParameters: InvitesV1CreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.invitesV1CreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async invitesV1DestroyRaw(requestParameters: InvitesV1DestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling invitesV1Destroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/invites/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async invitesV1Destroy(requestParameters: InvitesV1DestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.invitesV1DestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async invitesV1ListRaw(requestParameters: InvitesV1ListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedInviteList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/invites/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedInviteListFromJSON(jsonValue));
    }

    /**
     */
    async invitesV1List(requestParameters: InvitesV1ListRequest, initOverrides?: RequestInit): Promise<PaginatedInviteList> {
        const response = await this.invitesV1ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async invitesV1PartialUpdateRaw(requestParameters: InvitesV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Invite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling invitesV1PartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/invites/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedInviteRequestToJSON(requestParameters.patchedInviteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteFromJSON(jsonValue));
    }

    /**
     */
    async invitesV1PartialUpdate(requestParameters: InvitesV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<Invite> {
        const response = await this.invitesV1PartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async invitesV1RetrieveRaw(requestParameters: InvitesV1RetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Invite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling invitesV1Retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/invites/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteFromJSON(jsonValue));
    }

    /**
     */
    async invitesV1Retrieve(requestParameters: InvitesV1RetrieveRequest, initOverrides?: RequestInit): Promise<Invite> {
        const response = await this.invitesV1RetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async invitesV1UpdateRaw(requestParameters: InvitesV1UpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Invite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling invitesV1Update.');
        }

        if (requestParameters.inviteRequest === null || requestParameters.inviteRequest === undefined) {
            throw new runtime.RequiredError('inviteRequest','Required parameter requestParameters.inviteRequest was null or undefined when calling invitesV1Update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/invites/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InviteRequestToJSON(requestParameters.inviteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteFromJSON(jsonValue));
    }

    /**
     */
    async invitesV1Update(requestParameters: InvitesV1UpdateRequest, initOverrides?: RequestInit): Promise<Invite> {
        const response = await this.invitesV1UpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
