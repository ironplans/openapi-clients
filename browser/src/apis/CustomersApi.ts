/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Customer,
    CustomerFromJSON,
    CustomerToJSON,
    CustomerPaymentIntentRequest,
    CustomerPaymentIntentRequestFromJSON,
    CustomerPaymentIntentRequestToJSON,
    CustomerRequest,
    CustomerRequestFromJSON,
    CustomerRequestToJSON,
    CustomerTokenResponse,
    CustomerTokenResponseFromJSON,
    CustomerTokenResponseToJSON,
    IDTokenExchangeRequest,
    IDTokenExchangeRequestFromJSON,
    IDTokenExchangeRequestToJSON,
    IssueCustomerTokenRequest,
    IssueCustomerTokenRequestFromJSON,
    IssueCustomerTokenRequestToJSON,
    PaginatedCustomerList,
    PaginatedCustomerListFromJSON,
    PaginatedCustomerListToJSON,
    PatchedCustomerRequest,
    PatchedCustomerRequestFromJSON,
    PatchedCustomerRequestToJSON,
    PaymentIntentResponse,
    PaymentIntentResponseFromJSON,
    PaymentIntentResponseToJSON,
} from '../models';

export interface CustomersV1CreateRequest {
    customerRequest: CustomerRequest;
}

export interface CustomersV1DestroyRequest {
    id: string;
}

export interface CustomersV1ListRequest {
    limit?: number;
    offset?: number;
}

export interface CustomersV1OidcExchangeCreateRequest {
    iDTokenExchangeRequest: IDTokenExchangeRequest;
}

export interface CustomersV1PartialUpdateRequest {
    id: string;
    patchedCustomerRequest?: PatchedCustomerRequest;
}

export interface CustomersV1PaymentIntentCreateRequest {
    customerPaymentIntentRequest: CustomerPaymentIntentRequest;
}

export interface CustomersV1RetrieveRequest {
    id: string;
}

export interface CustomersV1TokenCreateRequest {
    issueCustomerTokenRequest?: IssueCustomerTokenRequest;
}

export interface CustomersV1UpdateRequest {
    id: string;
    customerRequest: CustomerRequest;
}

/**
 * 
 */
export class CustomersApi extends runtime.BaseAPI {

    /**
     */
    async customersV1CreateRaw(requestParameters: CustomersV1CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Customer>> {
        if (requestParameters.customerRequest === null || requestParameters.customerRequest === undefined) {
            throw new runtime.RequiredError('customerRequest','Required parameter requestParameters.customerRequest was null or undefined when calling customersV1Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/customers/v1/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerRequestToJSON(requestParameters.customerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFromJSON(jsonValue));
    }

    /**
     */
    async customersV1Create(requestParameters: CustomersV1CreateRequest, initOverrides?: RequestInit): Promise<Customer> {
        const response = await this.customersV1CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customersV1DestroyRaw(requestParameters: CustomersV1DestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customersV1Destroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/customers/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customersV1Destroy(requestParameters: CustomersV1DestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.customersV1DestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async customersV1ListRaw(requestParameters: CustomersV1ListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedCustomerList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/customers/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedCustomerListFromJSON(jsonValue));
    }

    /**
     */
    async customersV1List(requestParameters: CustomersV1ListRequest, initOverrides?: RequestInit): Promise<PaginatedCustomerList> {
        const response = await this.customersV1ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customersV1OidcExchangeCreateRaw(requestParameters: CustomersV1OidcExchangeCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerTokenResponse>> {
        if (requestParameters.iDTokenExchangeRequest === null || requestParameters.iDTokenExchangeRequest === undefined) {
            throw new runtime.RequiredError('iDTokenExchangeRequest','Required parameter requestParameters.iDTokenExchangeRequest was null or undefined when calling customersV1OidcExchangeCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/customers/v1/oidc-exchange/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IDTokenExchangeRequestToJSON(requestParameters.iDTokenExchangeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async customersV1OidcExchangeCreate(requestParameters: CustomersV1OidcExchangeCreateRequest, initOverrides?: RequestInit): Promise<CustomerTokenResponse> {
        const response = await this.customersV1OidcExchangeCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customersV1PartialUpdateRaw(requestParameters: CustomersV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Customer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customersV1PartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/customers/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCustomerRequestToJSON(requestParameters.patchedCustomerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFromJSON(jsonValue));
    }

    /**
     */
    async customersV1PartialUpdate(requestParameters: CustomersV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<Customer> {
        const response = await this.customersV1PartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customersV1PaymentIntentCreateRaw(requestParameters: CustomersV1PaymentIntentCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaymentIntentResponse>> {
        if (requestParameters.customerPaymentIntentRequest === null || requestParameters.customerPaymentIntentRequest === undefined) {
            throw new runtime.RequiredError('customerPaymentIntentRequest','Required parameter requestParameters.customerPaymentIntentRequest was null or undefined when calling customersV1PaymentIntentCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/customers/v1/payment_intent/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerPaymentIntentRequestToJSON(requestParameters.customerPaymentIntentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentIntentResponseFromJSON(jsonValue));
    }

    /**
     */
    async customersV1PaymentIntentCreate(requestParameters: CustomersV1PaymentIntentCreateRequest, initOverrides?: RequestInit): Promise<PaymentIntentResponse> {
        const response = await this.customersV1PaymentIntentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customersV1RenewTokenCreateRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/customers/v1/renew_token/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async customersV1RenewTokenCreate(initOverrides?: RequestInit): Promise<CustomerTokenResponse> {
        const response = await this.customersV1RenewTokenCreateRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async customersV1RetrieveRaw(requestParameters: CustomersV1RetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Customer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customersV1Retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/customers/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFromJSON(jsonValue));
    }

    /**
     */
    async customersV1Retrieve(requestParameters: CustomersV1RetrieveRequest, initOverrides?: RequestInit): Promise<Customer> {
        const response = await this.customersV1RetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customersV1TokenCreateRaw(requestParameters: CustomersV1TokenCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/customers/v1/token/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueCustomerTokenRequestToJSON(requestParameters.issueCustomerTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async customersV1TokenCreate(requestParameters: CustomersV1TokenCreateRequest, initOverrides?: RequestInit): Promise<CustomerTokenResponse> {
        const response = await this.customersV1TokenCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customersV1UpdateRaw(requestParameters: CustomersV1UpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Customer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customersV1Update.');
        }

        if (requestParameters.customerRequest === null || requestParameters.customerRequest === undefined) {
            throw new runtime.RequiredError('customerRequest','Required parameter requestParameters.customerRequest was null or undefined when calling customersV1Update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/customers/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerRequestToJSON(requestParameters.customerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFromJSON(jsonValue));
    }

    /**
     */
    async customersV1Update(requestParameters: CustomersV1UpdateRequest, initOverrides?: RequestInit): Promise<Customer> {
        const response = await this.customersV1UpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
