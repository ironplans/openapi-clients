/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedProviderList,
    PaginatedProviderListFromJSON,
    PaginatedProviderListToJSON,
    PatchedProviderRequest,
    PatchedProviderRequestFromJSON,
    PatchedProviderRequestToJSON,
    Provider,
    ProviderFromJSON,
    ProviderToJSON,
    ProviderRequest,
    ProviderRequestFromJSON,
    ProviderRequestToJSON,
    Slug,
    SlugFromJSON,
    SlugToJSON,
} from '../models';

export interface ProvidersV1CreateRequest {
    providerRequest: ProviderRequest;
}

export interface ProvidersV1DestroyRequest {
    id: string;
}

export interface ProvidersV1ListRequest {
    limit?: number;
    offset?: number;
}

export interface ProvidersV1PartialUpdateRequest {
    id: string;
    patchedProviderRequest?: PatchedProviderRequest;
}

export interface ProvidersV1RetrieveRequest {
    id: string;
}

export interface ProvidersV1SlugRetrieveRequest {
    slug?: string;
}

export interface ProvidersV1StripeCreateRequest {
    id: string;
    providerRequest: ProviderRequest;
}

export interface ProvidersV1StripeRetrieveRequest {
    id: string;
}

export interface ProvidersV1UpdateRequest {
    id: string;
    providerRequest: ProviderRequest;
}

/**
 * 
 */
export class ProvidersApi extends runtime.BaseAPI {

    /**
     */
    async providersV1CreateRaw(requestParameters: ProvidersV1CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.providerRequest === null || requestParameters.providerRequest === undefined) {
            throw new runtime.RequiredError('providerRequest','Required parameter requestParameters.providerRequest was null or undefined when calling providersV1Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/providers/v1/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderRequestToJSON(requestParameters.providerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async providersV1Create(requestParameters: ProvidersV1CreateRequest, initOverrides?: RequestInit): Promise<Provider> {
        const response = await this.providersV1CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async providersV1DestroyRaw(requestParameters: ProvidersV1DestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersV1Destroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/providers/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async providersV1Destroy(requestParameters: ProvidersV1DestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.providersV1DestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async providersV1ListRaw(requestParameters: ProvidersV1ListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedProviderList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/providers/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProviderListFromJSON(jsonValue));
    }

    /**
     */
    async providersV1List(requestParameters: ProvidersV1ListRequest, initOverrides?: RequestInit): Promise<PaginatedProviderList> {
        const response = await this.providersV1ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async providersV1PartialUpdateRaw(requestParameters: ProvidersV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersV1PartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/providers/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProviderRequestToJSON(requestParameters.patchedProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async providersV1PartialUpdate(requestParameters: ProvidersV1PartialUpdateRequest, initOverrides?: RequestInit): Promise<Provider> {
        const response = await this.providersV1PartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async providersV1RetrieveRaw(requestParameters: ProvidersV1RetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersV1Retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/providers/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async providersV1Retrieve(requestParameters: ProvidersV1RetrieveRequest, initOverrides?: RequestInit): Promise<Provider> {
        const response = await this.providersV1RetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async providersV1SlugRetrieveRaw(requestParameters: ProvidersV1SlugRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Slug>> {
        const queryParameters: any = {};

        if (requestParameters.slug !== undefined) {
            queryParameters['slug'] = requestParameters.slug;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/providers/v1/slug/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlugFromJSON(jsonValue));
    }

    /**
     */
    async providersV1SlugRetrieve(requestParameters: ProvidersV1SlugRetrieveRequest, initOverrides?: RequestInit): Promise<Slug> {
        const response = await this.providersV1SlugRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async providersV1StripeCreateRaw(requestParameters: ProvidersV1StripeCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersV1StripeCreate.');
        }

        if (requestParameters.providerRequest === null || requestParameters.providerRequest === undefined) {
            throw new runtime.RequiredError('providerRequest','Required parameter requestParameters.providerRequest was null or undefined when calling providersV1StripeCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/providers/v1/{id}/stripe/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderRequestToJSON(requestParameters.providerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async providersV1StripeCreate(requestParameters: ProvidersV1StripeCreateRequest, initOverrides?: RequestInit): Promise<Provider> {
        const response = await this.providersV1StripeCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async providersV1StripeRetrieveRaw(requestParameters: ProvidersV1StripeRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersV1StripeRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/providers/v1/{id}/stripe/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async providersV1StripeRetrieve(requestParameters: ProvidersV1StripeRetrieveRequest, initOverrides?: RequestInit): Promise<Provider> {
        const response = await this.providersV1StripeRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async providersV1UpdateRaw(requestParameters: ProvidersV1UpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersV1Update.');
        }

        if (requestParameters.providerRequest === null || requestParameters.providerRequest === undefined) {
            throw new runtime.RequiredError('providerRequest','Required parameter requestParameters.providerRequest was null or undefined when calling providersV1Update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/providers/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderRequestToJSON(requestParameters.providerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async providersV1Update(requestParameters: ProvidersV1UpdateRequest, initOverrides?: RequestInit): Promise<Provider> {
        const response = await this.providersV1UpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
