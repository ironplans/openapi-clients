/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * ViewSet for _Comrade_ customers\' accounts.
     */
    async accountsV1LoginCreateRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/accounts/v1/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ViewSet for _Comrade_ customers\' accounts.
     */
    async accountsV1LoginCreate(initOverrides?: RequestInit): Promise<void> {
        await this.accountsV1LoginCreateRaw(initOverrides);
    }

    /**
     * Shortcut to `/accounts/v1/{{my customer id}}`.  Automatically creates a new customer account if one does not exist for the authenticated user.
     */
    async accountsV1MeRetrieveRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/accounts/v1/me/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Shortcut to `/accounts/v1/{{my customer id}}`.  Automatically creates a new customer account if one does not exist for the authenticated user.
     */
    async accountsV1MeRetrieve(initOverrides?: RequestInit): Promise<void> {
        await this.accountsV1MeRetrieveRaw(initOverrides);
    }

    /**
     * TODO: List alias accounts.
     */
    async accountsV1RetrieveRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/accounts/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * TODO: List alias accounts.
     */
    async accountsV1Retrieve(initOverrides?: RequestInit): Promise<void> {
        await this.accountsV1RetrieveRaw(initOverrides);
    }

}
